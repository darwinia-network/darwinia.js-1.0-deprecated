// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */

import type { Status, UsableBalance } from '@darwinia/types/interfaces/balances';
import type { LaneId, MessageId, MessageNonce } from '@darwinia/types/interfaces/bridges';
import type { BSCHeader, EthereumAddress } from '@darwinia/types/interfaces/bsc';
import type { AccountData, AccountInfo, AddressT, BalanceInfo, BalanceLock, Bloom, ChainProperties, Common, DepositId, EcdsaAddress, EcdsaMessage, EcdsaSignature, ElectionCompute, ElectionResultT, EraIndex, EthashProof, EthereumBlockNumber, EthereumHeader, EthereumNetwork, EthereumReceipt, EthereumReceiptProof, EthereumReceiptProofThing, EthereumRelayHeaderParcel, EthereumRelayProofs, EthereumTransactionIndex, Exposure, ExposureT, IndividualExposure, KtonBalance, LegacyReceipt, LockFor, LogEntry, MMRProof, MMRRoot, MappedRing, MerkleMountainRangeRootLog, MmrRootToSign, OpCode, Order, OtherAddress, OtherSignature, Power, PriorRelayer, RKT, Reasons, RedeemFor, RefCount, RelayAuthorityMessage, RelayAuthoritySignature, RelayAuthoritySigner, RelayAuthorityT, Relayer, RingBalance, ScheduledAuthoritiesChangeT, Signer, SpanRecord, StakingBalanceT, StakingLedgerT, StakingLock, Term, TimeDepositItem, TokenMessageId, TokenMetadata, TransactionOutcome, TronAddress, TsInMs, UnappliedSlash, Unbonding, ValidatorPrefs, ValidatorPrefsWithBlocked } from '@darwinia/types/interfaces/darwiniaInject';
import type { Fee, InProcessOrders } from '@darwinia/types/interfaces/fee';
import type { MMRProofResult, MmrNodesPruningConfiguration, NodeIndex } from '@darwinia/types/interfaces/headerMMR';
import type { Announcement, ProxyAnnouncement, ProxyType } from '@darwinia/types/interfaces/proxy';
import type { RelayAffirmationId, RelayAffirmationT, RelayHeaderId, RelayHeaderParcel, RelayProofs, RelayVotingState } from '@darwinia/types/interfaces/relayerGame';
import type { PowerOf } from '@darwinia/types/interfaces/staking';
import type { Data, StorageKey } from '@polkadot/types';
import type { BitVec, Bool, Bytes, I128, I16, I256, I32, I64, I8, Json, Null, Raw, Text, Type, U128, U16, U256, U32, U64, U8, USize, bool, i128, i16, i256, i32, i64, i8, u128, u16, u256, u32, u64, u8, usize } from '@polkadot/types-codec';

declare module '@polkadot/types/types/registry' {
  export interface InterfaceTypes {
    AccountData: AccountData;
    AccountInfo: AccountInfo;
    AddressT: AddressT;
    Announcement: Announcement;
    BalanceInfo: BalanceInfo;
    BalanceLock: BalanceLock;
    BitVec: BitVec;
    Bloom: Bloom;
    bool: bool;
    Bool: Bool;
    BSCHeader: BSCHeader;
    Bytes: Bytes;
    ChainProperties: ChainProperties;
    Common: Common;
    Data: Data;
    DepositId: DepositId;
    EcdsaAddress: EcdsaAddress;
    EcdsaMessage: EcdsaMessage;
    EcdsaSignature: EcdsaSignature;
    ElectionCompute: ElectionCompute;
    ElectionResultT: ElectionResultT;
    EraIndex: EraIndex;
    EthashProof: EthashProof;
    EthereumAddress: EthereumAddress;
    EthereumBlockNumber: EthereumBlockNumber;
    EthereumHeader: EthereumHeader;
    EthereumNetwork: EthereumNetwork;
    EthereumReceipt: EthereumReceipt;
    EthereumReceiptProof: EthereumReceiptProof;
    EthereumReceiptProofThing: EthereumReceiptProofThing;
    EthereumRelayHeaderParcel: EthereumRelayHeaderParcel;
    EthereumRelayProofs: EthereumRelayProofs;
    EthereumTransactionIndex: EthereumTransactionIndex;
    Exposure: Exposure;
    ExposureT: ExposureT;
    Fee: Fee;
    i128: i128;
    I128: I128;
    i16: i16;
    I16: I16;
    i256: i256;
    I256: I256;
    i32: i32;
    I32: I32;
    i64: i64;
    I64: I64;
    i8: i8;
    I8: I8;
    IndividualExposure: IndividualExposure;
    InProcessOrders: InProcessOrders;
    Json: Json;
    KtonBalance: KtonBalance;
    LaneId: LaneId;
    LegacyReceipt: LegacyReceipt;
    LockFor: LockFor;
    LogEntry: LogEntry;
    MappedRing: MappedRing;
    MerkleMountainRangeRootLog: MerkleMountainRangeRootLog;
    MessageId: MessageId;
    MessageNonce: MessageNonce;
    MmrNodesPruningConfiguration: MmrNodesPruningConfiguration;
    MMRProof: MMRProof;
    MMRProofResult: MMRProofResult;
    MMRRoot: MMRRoot;
    MmrRootToSign: MmrRootToSign;
    NodeIndex: NodeIndex;
    Null: Null;
    OpCode: OpCode;
    Order: Order;
    OtherAddress: OtherAddress;
    OtherSignature: OtherSignature;
    Power: Power;
    PowerOf: PowerOf;
    PriorRelayer: PriorRelayer;
    ProxyAnnouncement: ProxyAnnouncement;
    ProxyType: ProxyType;
    Raw: Raw;
    Reasons: Reasons;
    RedeemFor: RedeemFor;
    RefCount: RefCount;
    RelayAffirmationId: RelayAffirmationId;
    RelayAffirmationT: RelayAffirmationT;
    RelayAuthorityMessage: RelayAuthorityMessage;
    RelayAuthoritySignature: RelayAuthoritySignature;
    RelayAuthoritySigner: RelayAuthoritySigner;
    RelayAuthorityT: RelayAuthorityT;
    Relayer: Relayer;
    RelayHeaderId: RelayHeaderId;
    RelayHeaderParcel: RelayHeaderParcel;
    RelayProofs: RelayProofs;
    RelayVotingState: RelayVotingState;
    RingBalance: RingBalance;
    RKT: RKT;
    ScheduledAuthoritiesChangeT: ScheduledAuthoritiesChangeT;
    Signer: Signer;
    SpanRecord: SpanRecord;
    StakingBalanceT: StakingBalanceT;
    StakingLedgerT: StakingLedgerT;
    StakingLock: StakingLock;
    Status: Status;
    StorageKey: StorageKey;
    Term: Term;
    Text: Text;
    TimeDepositItem: TimeDepositItem;
    TokenMessageId: TokenMessageId;
    TokenMetadata: TokenMetadata;
    TransactionOutcome: TransactionOutcome;
    TronAddress: TronAddress;
    TsInMs: TsInMs;
    Type: Type;
    u128: u128;
    U128: U128;
    u16: u16;
    U16: U16;
    u256: u256;
    U256: U256;
    u32: u32;
    U32: U32;
    u64: u64;
    U64: U64;
    u8: u8;
    U8: U8;
    UnappliedSlash: UnappliedSlash;
    Unbonding: Unbonding;
    UsableBalance: UsableBalance;
    usize: usize;
    USize: USize;
    ValidatorPrefs: ValidatorPrefs;
    ValidatorPrefsWithBlocked: ValidatorPrefsWithBlocked;
  } // InterfaceTypes
} // declare module
